///////////////////////////////////////////////////////////////////////
// This source was automatically generated by the lcm_to_ros package
// https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
///////////////////////////////////////////////////////////////////////
//
// Source message:    lcmt_iiwa_status.msg
// Creation:          Thu 25 Aug 2022 11:23:50 AM EDT
//
///////////////////////////////////////////////////////////////////////
#include <ros/ros.h>
#include <ros/console.h>
#include <string>

#include <lcm/lcm-cpp.hpp>

#include "lcm_to_ros/lcmt_iiwa_status.h"
#include "exlcm/lcmt_iiwa_status.hpp"

class LCMToROSRepublisher
{
    public:
        LCMToROSRepublisher(ros::NodeHandle& n);
        ~LCMToROSRepublisher();
        void lcmCallback(const lcm::ReceiveBuffer* rbuf,
                const std::string& channel_name,
                const exlcm::lcmt_iiwa_status* msg);
        
    private:        
        ros::NodeHandle nh;
        ros::Publisher ros_pub;   
};

LCMToROSRepublisher::LCMToROSRepublisher(ros::NodeHandle& n) 
{
    nh = n;
   
    // Publisher/s
    ros_pub = nh.advertise<lcm_to_ros::lcmt_iiwa_status>("lcmt_iiwa_status_2", 10);
    ROS_DEBUG("lcmt_iiwa_status publisher created");
};

LCMToROSRepublisher::~LCMToROSRepublisher() 
{    
    ROS_INFO("lcmt_iiwa_status LCMToROSRepublisher destructor.");
}

void LCMToROSRepublisher::lcmCallback(const lcm::ReceiveBuffer* rbuf,
        const std::string& channel_name,
        const exlcm::lcmt_iiwa_status* msg)
{
    ROS_DEBUG("Received message on channel \"%s\"", channel_name.c_str());
    const lcm_to_ros::lcmt_iiwa_status * new_ros_msg = reinterpret_cast<const lcm_to_ros::lcmt_iiwa_status *>(msg);
    ros_pub.publish(*new_ros_msg);
};
        

int main(int argc, char** argv)
{
    lcm::LCM lcm_;
    if(!lcm_.good())
        return 1;

    ros::init(argc, argv, "lcmt_iiwa_status_republish_2");
    ros::NodeHandle nh;   

    LCMToROSRepublisher handlerObject(nh);
    
    lcm_.subscribe("IIWA_STATUS", &LCMToROSRepublisher::lcmCallback, &handlerObject);
    int lcm_timeout = 100; //ms
    while( ( lcm_.handleTimeout(lcm_timeout) >= 0 ) && (ros::ok()) ) //
        ros::spinOnce();
        

    return 0;
}

